// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);
    RAM8(in=in, load=load1, address=address[0..2], out=ram8-1);
    RAM8(in=in, load=load2, address=address[0..2], out=ram8-2);
    RAM8(in=in, load=load3, address=address[0..2], out=ram8-3);
    RAM8(in=in, load=load4, address=address[0..2], out=ram8-4);
    RAM8(in=in, load=load5, address=address[0..2], out=ram8-5);
    RAM8(in=in, load=load6, address=address[0..2], out=ram8-6);
    RAM8(in=in, load=load7, address=address[0..2], out=ram8-7);
    RAM8(in=in, load=load8, address=address[0..2], out=ram8-8);
    Mux8Way16(a=ram8-1, b=ram8-2, c=ram8-3, d=ram8-4, e=ram8-5, f=ram8-6, g=ram8-7, h=ram8-8, sel=address[3..5], out=out);

}
